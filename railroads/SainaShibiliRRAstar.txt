import sys; args = sys.argv[1:]

#Saina Shibili, 6, 2023

from math import pi , acos , sin , cos
from queue import PriorityQueue

#"/Users/saina/Documents/HW/AI Code/slider Puzzle/Eckel55G.txt"

# LOCATIONFILE = "rrNodes.txt"
# EDGEFILE = "rrEdges.txt"
# CITIESFILE = "rrNodeCity.txt"

LOCATIONFILE = "/Users/saina/Documents/School/AI Code/Railroads/rrNodes.txt"
EDGEFILE = "/Users/saina/Documents/School/AI Code/Railroads/rrEdges.txt"
CITIESFILE = "/Users/saina/Documents/School/AI Code/Railroads/rrNodeCity.txt"


gLatLong = {}
gNeighbors = {}
gNames = {}

def aStar(start, goal): #aStar to find the path

    if start == goal: return [start]
    
    openSet = PriorityQueue() #priority Queue, (fVal, station)
    openSet.put((callEstimateDist(start, goal), start))
    closedSet = {}  #station : level

    while not openSet.empty():

        fVal, station = openSet.get()

        if station in closedSet: continue
        closedSet[station] = fVal - callEstimateDist(station, goal) #fVal - 3d distance of pzl to goal == gVal

        if station == goal: return buildPath(closedSet, station, start, goal) 

        for nbr in neighbors(station): 

            if nbr in closedSet: continue
            openSet.put((closedSet[station] + 1 + callEstimateDist(nbr, goal), nbr)) #3d distance of nbr to goal

def buildPath(closedSet, station, start, goal):
    path = [station]

    while station != start:
        for nbr in neighbors(start):
            if nbr == start or (nbr in closedSet and closedSet[nbr] < closedSet[station]):
                station = nbr
                path.append(nbr)
    
    return  path[::-1] + [goal]

def readNeighbors(fileName):    #reads in neighbors file
    global gNeighbors
    for station in open(fileName, 'r').read().splitlines():
        listStation = station.split(" ")
        if listStation[0] in gNeighbors:
            gNeighbors[listStation[0]].append(listStation[1])
        else:
            gNeighbors[listStation[0]] = [listStation[1]]


def readLatLong(fileName):  #reads in latitude and longitude information
    global gLatLong
    for station in open(fileName, 'r').read().splitlines():
        listStation = station.split(" ")
        gLatLong[listStation[0]] = [listStation[1], listStation[2]]

def readCityNames(fileName):    #reads in the city names
    global gNames
    for station in open(fileName, 'r').read().splitlines():
        listStation = station.split(" ")
        gNames[listStation[1]] = listStation[0]

def neighbors(station): #accessses the neighbors from the global
    global gNeighbors
    if station in gNeighbors: return gNeighbors[station]
    return []

def callEstimateDist(val1, val2):
    global gLatLong
    lat1, long1 = gLatLong[val1]
    lat2, long2 = gLatLong[val2]
    return estimateDist(lat1, long1, lat2, long2)

def estimateDist(lat1, long1, lat2, long2): #hVal, 3d distance of point A to point B

    lat1  = float(lat1) * (pi/180.0)
    long1  = float(long1) * (pi/180.0)
    lat2  = float(lat2) * (pi/180.0)
    long2  = float(long2) * (pi/180.0)

    R   = 3958.76

    return acos(sin(lat1)*sin(lat2) + cos(lat1)*cos(lat2)*cos(long1-long2)) * R

def findDist(start, end):
    print(aStar(start, end))

def makeStartEnd(args):
    global LOCATIONFILE, EDGEFILE, CITIESFILE, gNeighbors, gLatLong, gNames

    readLatLong(LOCATIONFILE)
    readNeighbors(EDGEFILE)
    readCityNames(CITIESFILE)

    if args[0] in gNames: start = gNames[args[0]]
    else: start = args[0]
    if args[1] in gNames: end = gNames[args[1]]
    else: end = args[1]

    findDist(start, end)

#makeStartEnd(["3500060", "3500031"])
#makeStartEnd(["Austin", "Chihuahua"])
makeStartEnd(args)



